
/*:
 
 # Массивы
 
 ## Создание массива
 1. Создаем массив с явным указанием типа
 
*/
var array = Array<Int>()
/*:
 2. Другой способ создания массива с явно заданным типом
 */
var array4: [Int] = []
/*:
 3. Создаем массив с *заранее созданными элементами массива*
 */
var array2 = Array(repeating: 0, count: 10)
print("Элементы массива array2: \(array2)")
/*:
 4. Создаем массив неявно указывая тип. В данном случае это Int.
 */
var array3 = [1,2,3]

/*:
 ## Теперь рассмотрим как можно работать с массивами
 
 ### Добавляем в массив элементы
 
 Самый простой способ, это `append`
 */
array.append(2)
print("Значение массива array (1): \(array)")

/*:
 Так же мы можем добавить значение по индексу
 */
array.insert(5, at: 0)
print("Значение массива array (2): \(array)")
/*:
 ❗️ Но нужно быть осторожным, так как мы можем выйти за пределы массива и получить ошибку, раскомментируй код ниже
 */
// array.insert(3, at: 10)
/*:
 
 ### Получаем значение элемента в массиве
 Что бы получить элемент из массива нужно его вытащить, указав индекс. ❗️ Учти, тут тоже можно выйти за пределы массива и получить ошибку выше!
 */
print("В массиве array по index = 0 лежит число: \(array[0])")
print("В массиве array по index = 1 лежит число: \(array[1])")
// print("В массиве array по index = 2 лежит число: \(array[2])") // лежит ошибка *Fatal error: Array index is out of range*
/*:
 Мы научились добавлять и считывать значения. Но массив это, в первую очередь, набор элементов, по этому нам надо научится перебирать значения.
 
 Для этого есть пару способов. Рассмотрим первый:
 */

for (index, value) in array.enumerated() {
    print("По index = \(index) лежит элемент: \(value)")
}

/*:
 В цикле мы проходим по всем элементам массива и выводим их идекс и значение. Для того что бы вывести индекс мы использовали метод **Array** - **enumerated()**. Он возвращает нам кортедж в котором на первом месте идет **index**, а за ним идет значение массива.
 
 Но есть более компактная форма записи этого цикла:
 */
array.enumerated().forEach { print("(Краткая форма) По index = \($0.offset) лежит элемент: \($0.element)")}

/*:
 А теперь пройдемся по интересным штукам
 */

array.reverse() // перевернули массив
let stringArray = array.map { String($0) } // преобразовали массив из типа Int в массив типа String
array.filter { $0 % 2 == 0 } // отфильтровали, если число делится без остатка на 2 то мы его оставляем
array.min() // вернули минимальный элемент
array.max() // вернули максимальный элемент
array.sort() // отсортировали
array.sort(by: <) // отсортировали от меньшего к большему
array.count // вывели количество элементов в массиве
array.removeLast() // удалили последний элемент
array.removeFirst() //  удалили первый элемент
array.append(contentsOf: [1,4,2,3,1,5,7,4]) // добавили сразу массив элементов
array += [4,3,8,9,0,6,8,7] // или вот так тоже можно добавить
array.removeAll(where: { $0 % 2 == 0 }) // удалили все элементы которые делятся на 2 без остатка
array.removeAll() // удалили все элементы
array.isEmpty ? print("Массив пустой") : print("Массив не пустой") // проверили, массив пустой после удаления или нет
array += [4,3,8,9,0,6,8,7]
let reduce1 = array.reduce(0, +) // сложили все элементы массива
let reduce2 = array.reduce(0) { (result, value) in // а это расписанная версия. 0 в этом примере, это то число с которого начинается сложение, то есть первая опериция будет иметь вид 0 + array[0], затем результат этого сложения передается дальше и получается [результат предыдущего сложениея] + array[1] и так до конца массива.
    return result + value
}
print("Reduce1 = \(reduce1) и reduce2 = \(reduce2)")
